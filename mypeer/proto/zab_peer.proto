syntax = "proto3";
package zab_peer;

import "google/protobuf/empty.proto";
import "types.proto";

service ZabPeerService {
  rpc SendElectionNotification (ElectionRequest) returns (google.protobuf.Empty) {}

  rpc GetState(google.protobuf.Empty) returns (GetStateResponse) {}

  rpc SendFollowerInfo(FollowerInfoRequest) returns (FollowerInfoResponse) {}

  rpc SendAckNewLeader(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  rpc ProposeTransaction(ProposeTransactionRequest) returns (google.protobuf.Empty) {}

  rpc CommitTransaction(CommitTransactionRequest) returns (google.protobuf.Empty) {}

  rpc UpdateHistoryOldThreshold(UpdateHistoryOldThresholdRequest) returns (google.protobuf.Empty) {}

  rpc SendHeartbeat(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

message ElectionRequest {
  zab.Vote vote = 1;
  uint32 id = 2;
  zab.State state = 3;
  uint32 round = 4;
}

message GetStateResponse {
  zab.State state = 1;
}

message FollowerInfoRequest {
  zab.ZxId last_zx_id = 1;
}

message FollowerInfoResponse {
  zab.ZxId last_zx_id = 1;

  oneof type {
    zab.Trunc trunc = 2;
    zab.Diff diff = 3;
    zab.Snap snap = 4;
  }
}

message ProposeTransactionRequest {
  zab.ZxId zx_id = 1;
  zab.BankTransaction transaction = 2;
}

message AckTransactionRequest {
  zab.ZxId zx_id = 1;
}

message CommitTransactionRequest {
  zab.ZxId zx_id = 1;
}

message UpdateHistoryOldThresholdRequest {
  zab.ZxId zx_id = 1;
}

message HistoryRequest {
  zab.History history = 1;
}