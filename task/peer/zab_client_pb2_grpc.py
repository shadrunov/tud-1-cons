# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import zab_client_pb2 as zab__client__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in zab_client_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ZabClientServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.WriteTransaction = channel.unary_unary(
                '/zab_client.ZabClientService/WriteTransaction',
                request_serializer=zab__client__pb2.WriteTransactionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ReadAccount = channel.unary_unary(
                '/zab_client.ZabClientService/ReadAccount',
                request_serializer=zab__client__pb2.ReadAccountRequest.SerializeToString,
                response_deserializer=zab__client__pb2.ReadAccountResponse.FromString,
                _registered_method=True)
        self.DebugReadAccount = channel.unary_unary(
                '/zab_client.ZabClientService/DebugReadAccount',
                request_serializer=zab__client__pb2.ReadAccountRequest.SerializeToString,
                response_deserializer=zab__client__pb2.ReadAccountResponse.FromString,
                _registered_method=True)
        self.DebugHasOutstandingTransactions = channel.unary_unary(
                '/zab_client.ZabClientService/DebugHasOutstandingTransactions',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=zab__client__pb2.DebugHasOutstandingTransactionsResponse.FromString,
                _registered_method=True)


class ZabClientServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def WriteTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DebugReadAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DebugHasOutstandingTransactions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ZabClientServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'WriteTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteTransaction,
                    request_deserializer=zab__client__pb2.WriteTransactionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ReadAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadAccount,
                    request_deserializer=zab__client__pb2.ReadAccountRequest.FromString,
                    response_serializer=zab__client__pb2.ReadAccountResponse.SerializeToString,
            ),
            'DebugReadAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DebugReadAccount,
                    request_deserializer=zab__client__pb2.ReadAccountRequest.FromString,
                    response_serializer=zab__client__pb2.ReadAccountResponse.SerializeToString,
            ),
            'DebugHasOutstandingTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.DebugHasOutstandingTransactions,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=zab__client__pb2.DebugHasOutstandingTransactionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'zab_client.ZabClientService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('zab_client.ZabClientService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ZabClientService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def WriteTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zab_client.ZabClientService/WriteTransaction',
            zab__client__pb2.WriteTransactionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zab_client.ZabClientService/ReadAccount',
            zab__client__pb2.ReadAccountRequest.SerializeToString,
            zab__client__pb2.ReadAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DebugReadAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zab_client.ZabClientService/DebugReadAccount',
            zab__client__pb2.ReadAccountRequest.SerializeToString,
            zab__client__pb2.ReadAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DebugHasOutstandingTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zab_client.ZabClientService/DebugHasOutstandingTransactions',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            zab__client__pb2.DebugHasOutstandingTransactionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
